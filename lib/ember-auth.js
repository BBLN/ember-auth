/*!
 * jQuery Cookie Plugin v1.3.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd && define.amd.jQuery) {
		// AMD. Register as anonymous module.
		define(['jquery'], factory);
	} else {
		// Browser globals.
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function raw(s) {
		return s;
	}

	function decoded(s) {
		return decodeURIComponent(s.replace(pluses, ' '));
	}

	function converted(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}
		try {
			return config.json ? JSON.parse(s) : s;
		} catch(er) {}
	}

	var config = $.cookie = function (key, value, options) {

		// write
		if (value !== undefined) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setDate(t.getDate() + days);
			}

			value = config.json ? JSON.stringify(value) : String(value);

			return (document.cookie = [
				encodeURIComponent(key), '=', config.raw ? value : encodeURIComponent(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// read
		var decode = config.raw ? raw : decoded;
		var cookies = document.cookie.split('; ');
		var result = key ? undefined : {};
		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = decode(parts.join('='));

			if (key && key === name) {
				result = converted(cookie);
				break;
			}

			if (!key) {
				result[name] = converted(cookie);
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) !== undefined) {
			$.cookie(key, '', $.extend(options, { expires: -1 }));
			return true;
		}
		return false;
	};

}));


// Generated by CoffeeScript 1.4.0
(function() {
  var evented;

  evented = Em.Object.extend(Em.Evented);

  window.Auth = evented.create({
    authToken: null,
    currentUserId: null,
    jqxhr: null,
    prevRoute: null,
    signIn: function(data) {
      var _this = this;
      if (data == null) {
        data = {};
      }
      return this.ajax(this.resolveUrl(Auth.Config.get('tokenCreateUrl')), 'POST', {
        data: data,
        success: function(json, status, jqxhr) {
          _this.set('authToken', json[Auth.Config.get('tokenKey')]);
          _this.set('currentUserId', json[Auth.Config.get('idKey')]);
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signInSuccess');
        },
        error: function(jqxhr) {
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signInError');
        },
        complete: function(jqxhr) {
          _this.set('prevRoute', null);
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signInComplete');
        }
      });
    },
    signOut: function(data) {
      var _this = this;
      if (data == null) {
        data = {};
      }
      data[Auth.Config.get('tokenKey')] = this.get('authToken');
      return this.ajax(this.resolveUrl(Auth.Config.get('tokenDestroyUrl')), 'DELETE', {
        data: data,
        success: function(json, status, jqxhr) {
          _this.set('authToken', null);
          _this.set('currentUserId', null);
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signOutSuccess');
        },
        error: function(jqxhr) {
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signOutError');
        },
        complete: function(jqxhr) {
          _this.set('prevRoute', null);
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signOutComplete');
        }
      });
    },
    resolveUrl: function(path) {
      var base;
      base = Auth.Config.get('baseUrl');
      if (base && base[base.length - 1] === '/') {
        base = base.substr(0, base.length - 1);
      }
      if (path[0] === '/') {
        path = path.substr(1, path.length);
      }
      return [base, path].join('/');
    },
    resolveRedirectRoute: function(type) {
      var fallback, isSmart, sameRoute, typeClassCase;
      if (type !== 'signIn' && type !== 'signOut') {
        return null;
      }
      typeClassCase = "" + (type[0].toUpperCase()) + (type.slice(1));
      isSmart = Auth.Config.get("smart" + typeClassCase + "Redirect");
      fallback = Auth.Config.get("" + type + "RedirectFallbackRoute");
      sameRoute = Auth.Config.get("" + type + "Route");
      if (!isSmart) {
        return fallback;
      }
      if (!(this.prevRoute != null) || this.prevRoute === sameRoute) {
        return fallback;
      } else {
        return this.prevRoute;
      }
    },
    ajax: function(url, type, hash) {
      hash.url = url;
      hash.type = type;
      hash.dataType = 'json';
      hash.contentType = 'application/json; charset=utf-8';
      if (hash.data && type !== 'GET') {
        hash.data = JSON.stringify(hash.data);
      }
      return jQuery.ajax(hash);
    }
  });

  Auth.Config = Em.Object.create({
    tokenCreateUrl: null,
    tokenDestroyUrl: null,
    tokenKey: null,
    idKey: null,
    baseUrl: null,
    signInRoute: null,
    signOutRoute: null,
    authRedirect: false,
    smartSignInRedirect: false,
    smartSignOutRedirect: false,
    signInRedirectFallbackRoute: 'index',
    signOutRedirectFallbackRoute: 'index',
    rememberMe: false,
    rememberTokenKey: null,
    rememberPeriod: function() {
      return 14;
    }
  });

  Auth.Route = Em.Route.extend({
    redirect: function() {
      if (Auth.Config.get('authRedirect') && !Auth.get('authToken')) {
        Auth.set('prevRoute', this.routeName);
        return this.transitionTo(Auth.Config.get('signInRoute'));
      }
    }
  });

  Auth.SignInController = Em.ObjectController.extend({
    registerRedirect: function() {
      return Auth.addObserver('authToken', this, 'smartSignInRedirect');
    },
    smartSignInRedirect: function() {
      if (Auth.get('authToken')) {
        this.get('target.router').transitionTo(Auth.resolveRedirectRoute('signIn'));
        return Auth.removeObserver('authToken', this, 'smartSignInRedirect');
      }
    }
  });

  Auth.SignOutController = Em.ObjectController.extend({
    registerRedirect: function() {
      return Auth.addObserver('authToken', this, 'smartSignOutRedirect');
    },
    smartSignOutRedirect: function() {
      if (!Auth.get('authToken')) {
        this.get('target.router').transitionTo(Auth.resolveRedirectRoute('signOut'));
        return Auth.removeObserver('authToken', this, 'smartSignOutRedirect');
      }
    }
  });

  Auth.RESTAdapter = DS.RESTAdapter.extend({
    ajax: function(url, type, hash) {
      var token;
      if (token = Auth.get('authToken')) {
        hash.data || (hash.data = {});
        hash.data[Auth.Config.get('tokenKey')] = Auth.get('authToken');
      }
      hash.context = this;
      return Auth.ajax(url, type, hash);
    }
  });

}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {
  var evented;

  evented = Em.Object.extend(Em.Evented);

  window.Auth = evented.create({
    authToken: null,
    currentUserId: null,
    jqxhr: null,
    prevRoute: null,
    signIn: function(data) {
      var _this = this;
      if (data == null) {
        data = {};
      }
      return this.ajax(this.resolveUrl(Auth.Config.get('tokenCreateUrl')), 'POST', {
        data: data,
        success: function(json, status, jqxhr) {
          _this.set('authToken', json[Auth.Config.get('tokenKey')]);
          _this.set('currentUserId', json[Auth.Config.get('idKey')]);
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signInSuccess');
        },
        error: function(jqxhr) {
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signInError');
        },
        complete: function(jqxhr) {
          _this.set('prevRoute', null);
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signInComplete');
        }
      });
    },
    signOut: function(data) {
      var _this = this;
      if (data == null) {
        data = {};
      }
      data[Auth.Config.get('tokenKey')] = this.get('authToken');
      return this.ajax(this.resolveUrl(Auth.Config.get('tokenDestroyUrl')), 'DELETE', {
        data: data,
        success: function(json, status, jqxhr) {
          _this.set('authToken', null);
          _this.set('currentUserId', null);
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signOutSuccess');
        },
        error: function(jqxhr) {
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signOutError');
        },
        complete: function(jqxhr) {
          _this.set('prevRoute', null);
          _this.set('jqxhr', jqxhr);
          return _this.trigger('signOutComplete');
        }
      });
    },
    resolveUrl: function(path) {
      var base;
      base = Auth.Config.get('baseUrl');
      if (base && base[base.length - 1] === '/') {
        base = base.substr(0, base.length - 1);
      }
      if (path[0] === '/') {
        path = path.substr(1, path.length);
      }
      return [base, path].join('/');
    },
    resolveRedirectRoute: function(type) {
      var fallback, isSmart, sameRoute, typeClassCase;
      if (type !== 'signIn' && type !== 'signOut') {
        return null;
      }
      typeClassCase = "" + (type[0].toUpperCase()) + (type.slice(1));
      isSmart = Auth.Config.get("smart" + typeClassCase + "Redirect");
      fallback = Auth.Config.get("" + type + "RedirectFallbackRoute");
      sameRoute = Auth.Config.get("" + type + "Route");
      if (!isSmart) {
        return fallback;
      }
      if (!(this.prevRoute != null) || this.prevRoute === sameRoute) {
        return fallback;
      } else {
        return this.prevRoute;
      }
    },
    ajax: function(url, type, hash) {
      hash.url = url;
      hash.type = type;
      hash.dataType = 'json';
      hash.contentType = 'application/json; charset=utf-8';
      if (hash.data && type !== 'GET') {
        hash.data = JSON.stringify(hash.data);
      }
      return jQuery.ajax(hash);
    }
  });

  Auth.Config = Em.Object.create({
    tokenCreateUrl: null,
    tokenDestroyUrl: null,
    tokenKey: null,
    idKey: null,
    baseUrl: null,
    signInRoute: null,
    signOutRoute: null,
    authRedirect: false,
    smartSignInRedirect: false,
    smartSignOutRedirect: false,
    signInRedirectFallbackRoute: 'index',
    signOutRedirectFallbackRoute: 'index',
    rememberMe: false,
    rememberTokenKey: null,
    rememberPeriod: function() {
      return 14;
    }
  });

  Auth.Route = Em.Route.extend({
    redirect: function() {
      if (Auth.Config.get('authRedirect') && !Auth.get('authToken')) {
        Auth.set('prevRoute', this.routeName);
        return this.transitionTo(Auth.Config.get('signInRoute'));
      }
    }
  });

  Auth.SignInController = Em.ObjectController.extend({
    registerRedirect: function() {
      return Auth.addObserver('authToken', this, 'smartSignInRedirect');
    },
    smartSignInRedirect: function() {
      if (Auth.get('authToken')) {
        this.get('target.router').transitionTo(Auth.resolveRedirectRoute('signIn'));
        return Auth.removeObserver('authToken', this, 'smartSignInRedirect');
      }
    }
  });

  Auth.SignOutController = Em.ObjectController.extend({
    registerRedirect: function() {
      return Auth.addObserver('authToken', this, 'smartSignOutRedirect');
    },
    smartSignOutRedirect: function() {
      if (!Auth.get('authToken')) {
        this.get('target.router').transitionTo(Auth.resolveRedirectRoute('signOut'));
        return Auth.removeObserver('authToken', this, 'smartSignOutRedirect');
      }
    }
  });

  Auth.RESTAdapter = DS.RESTAdapter.extend({
    ajax: function(url, type, hash) {
      var token;
      if (token = Auth.get('authToken')) {
        hash.data || (hash.data = {});
        hash.data[Auth.Config.get('tokenKey')] = Auth.get('authToken');
      }
      hash.context = this;
      return Auth.ajax(url, type, hash);
    }
  });

}).call(this);
